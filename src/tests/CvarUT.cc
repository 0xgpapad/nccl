// (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

#include <gmock/gmock.h>
#include <gtest/gtest.h>
#include <nccl.h>
#include <stdlib.h>
#include <set>
#include <vector>
#include "../include/nccl_cvars.h"

class NCCLEnvironment : public ::testing::Environment {
 public:
  void SetUp() override {
    // Turn off NCCL debug logging, allow user to turn on via command line
    setenv("NCCL_DEBUG", "WARN", 0);
  }
  ~NCCLEnvironment() override {}
};

class CvarTest : public ::testing::Test {
 public:
  CvarTest() = default;
};

/**
* Utility functions
*/
template <typename T>
void checkListValues(std::vector<T> vals, std::vector<T> cvar) {
  for (int i = 0; i < vals.size(); i++) {
    EXPECT_EQ(cvar[i], vals[i]);
  }
}

void testDefaultValue(const char* cvarName) {
  unsetenv(cvarName);
  ncclCvarInit();
}

template <typename T>
void testNumValue(const char* cvarName, T val) {
  std::ostringstream varOSS;
  varOSS << val;
  std::string varStr = varOSS.str();
  setenv(cvarName, varStr.c_str(), 1);
  ncclCvarInit();
}

void testWarn(const char* cvarName, std::string expectedKeyword) {
  testing::internal::CaptureStdout();
  ncclCvarInit();
  std::string output = testing::internal::GetCapturedStdout();
  EXPECT_THAT(output, testing::HasSubstr(expectedKeyword));

  // Unset to avoid warning in later tests
  unsetenv(cvarName);
}

TEST_F(CvarTest, UnknownEnv) {
  setenv("NCCL_DUMMY_ENV", "dummy", 1);
  testWarn("NCCL_DUMMY_ENV", "Unknown env");
}

/**
* START of generated tests
*/

// Automatically generated by ./maint/extractcvars.py
// DO NOT EDIT!!!
TEST_F(CvarTest, NCCL_ALLGATHER_ALGO_single_choice_0) {
  setenv("NCCL_ALLGATHER_ALGO", "orig", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLGATHER_ALGO, NCCL_ALLGATHER_ALGO::orig);
}

TEST_F(CvarTest, NCCL_ALLGATHER_ALGO_single_choice_1) {
  setenv("NCCL_ALLGATHER_ALGO", "ctdirect", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLGATHER_ALGO, NCCL_ALLGATHER_ALGO::ctdirect);
}

TEST_F(CvarTest, NCCL_ALLGATHER_ALGO_single_choice_2) {
  setenv("NCCL_ALLGATHER_ALGO", "ctring", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLGATHER_ALGO, NCCL_ALLGATHER_ALGO::ctring);
}

TEST_F(CvarTest, NCCL_ALLGATHER_ALGO_single_choice_3) {
  setenv("NCCL_ALLGATHER_ALGO", "ctrd", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLGATHER_ALGO, NCCL_ALLGATHER_ALGO::ctrd);
}

TEST_F(CvarTest, NCCL_ALLGATHER_ALGO_default_choice) {
  testDefaultValue("NCCL_ALLGATHER_ALGO");
  EXPECT_EQ(NCCL_ALLGATHER_ALGO, NCCL_ALLGATHER_ALGO::orig);
}

TEST_F(CvarTest, NCCL_ALLGATHER_ALGO_warn_unknown_val) {
  setenv("NCCL_ALLGATHER_ALGO", "dummy", 1);
  testWarn("NCCL_ALLGATHER_ALGO", "Unknown value");
}

TEST_F(CvarTest, NCCL_ALLGATHER_DIRECT_CUTOFF_value_0) {
  testNumValue<uint64_t>("NCCL_ALLGATHER_DIRECT_CUTOFF", 0);
  EXPECT_EQ(NCCL_ALLGATHER_DIRECT_CUTOFF, 0);
}

TEST_F(CvarTest, NCCL_ALLGATHER_DIRECT_CUTOFF_value_1) {
  testNumValue<uint64_t>("NCCL_ALLGATHER_DIRECT_CUTOFF", 9999);
  EXPECT_EQ(NCCL_ALLGATHER_DIRECT_CUTOFF, 9999);
}

TEST_F(CvarTest, NCCL_ALLGATHER_DIRECT_CUTOFF_value_2) {
  testNumValue<uint64_t>("NCCL_ALLGATHER_DIRECT_CUTOFF", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_ALLGATHER_DIRECT_CUTOFF, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_ALLGATHER_DIRECT_CUTOFF_value_3) {
  testNumValue<uint64_t>("NCCL_ALLGATHER_DIRECT_CUTOFF", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_ALLGATHER_DIRECT_CUTOFF, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_ALLGATHER_DIRECT_CUTOFF_default_value) {
  testDefaultValue("NCCL_ALLGATHER_DIRECT_CUTOFF");
  EXPECT_EQ(NCCL_ALLGATHER_DIRECT_CUTOFF, 524288);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_single_choice_0) {
  setenv("NCCL_ALLREDUCE_ALGO", "orig", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO, NCCL_ALLREDUCE_ALGO::orig);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_single_choice_1) {
  setenv("NCCL_ALLREDUCE_ALGO", "dda", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO, NCCL_ALLREDUCE_ALGO::dda);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_default_choice) {
  testDefaultValue("NCCL_ALLREDUCE_ALGO");
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO, NCCL_ALLREDUCE_ALGO::orig);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_warn_unknown_val) {
  setenv("NCCL_ALLREDUCE_ALGO", "dummy", 1);
  testWarn("NCCL_ALLREDUCE_ALGO", "Unknown value");
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO2_single_choice_0) {
  setenv("NCCL_ALLREDUCE_ALGO2", "orig", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO2, NCCL_ALLREDUCE_ALGO2::orig);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO2_single_choice_1) {
  setenv("NCCL_ALLREDUCE_ALGO2", "dda", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO2, NCCL_ALLREDUCE_ALGO2::dda);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO2_default_choice) {
  testDefaultValue("NCCL_ALLREDUCE_ALGO2");
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO2, NCCL_ALLREDUCE_ALGO2::orig);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO2_warn_unknown_val) {
  setenv("NCCL_ALLREDUCE_ALGO2", "dummy", 1);
  testWarn("NCCL_ALLREDUCE_ALGO2", "Unknown value");
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_value_0) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS", 0);
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS, 0);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_value_1) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS", 9999);
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS, 9999);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_value_2) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_value_3) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS_default_value) {
  testDefaultValue("NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS");
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_NUM_THREAD_BLOCKS, -1);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_value_0) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE", 0);
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE, 0);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_value_1) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE", 9999);
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_value_2) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_value_3) {
  testNumValue<int>("NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE_default_value) {
  testDefaultValue("NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE");
  EXPECT_EQ(NCCL_ALLREDUCE_SPARSE_BLOCK_THREAD_BLOCK_SIZE, -1);
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_0) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", 0);
  EXPECT_EQ(NCCL_CROSS_NIC, 0);
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_1) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", 9999);
  EXPECT_EQ(NCCL_CROSS_NIC, 9999);
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_2) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CROSS_NIC, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_3) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CROSS_NIC, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_CROSS_NIC_default_value) {
  testDefaultValue("NCCL_CROSS_NIC");
  EXPECT_EQ(NCCL_CROSS_NIC, 2);
}

TEST_F(CvarTest, NCCL_CTRAN_BACKENDS_single_choice_0) {
  setenv("NCCL_CTRAN_BACKENDS", "ib", 1);
  ncclCvarInit();
  std::vector<enum NCCL_CTRAN_BACKENDS> vals{NCCL_CTRAN_BACKENDS::ib};
  checkListValues<enum NCCL_CTRAN_BACKENDS>(vals, NCCL_CTRAN_BACKENDS);
}

TEST_F(CvarTest, NCCL_CTRAN_BACKENDS_all_choices) {
  setenv("NCCL_CTRAN_BACKENDS", "ib", 1);
  ncclCvarInit();
  std::vector<enum NCCL_CTRAN_BACKENDS> vals{NCCL_CTRAN_BACKENDS::ib};
  checkListValues<enum NCCL_CTRAN_BACKENDS>(vals, NCCL_CTRAN_BACKENDS);
}

TEST_F(CvarTest, NCCL_CTRAN_BACKENDS_default_choices) {
  testDefaultValue("NCCL_CTRAN_BACKENDS");
  std::vector<enum NCCL_CTRAN_BACKENDS> vals{NCCL_CTRAN_BACKENDS::ib};
  checkListValues<enum NCCL_CTRAN_BACKENDS>(vals, NCCL_CTRAN_BACKENDS);
}

TEST_F(CvarTest, NCCL_CTRAN_BACKENDS_warn_unknown_val) {
  setenv("NCCL_CTRAN_BACKENDS", "dummy", 1);
  testWarn("NCCL_CTRAN_BACKENDS", "Unknown value");
}

TEST_F(CvarTest, NCCL_CTRAN_BACKENDS_warn_dup_val) {
  setenv("NCCL_CTRAN_BACKENDS", "dummy,dummy", 1);
  testWarn("NCCL_CTRAN_BACKENDS", "Duplicate token");
}

TEST_F(CvarTest, NCCL_CTRAN_IB_MAX_QPS_value_0) {
  testNumValue<int>("NCCL_CTRAN_IB_MAX_QPS", 0);
  EXPECT_EQ(NCCL_CTRAN_IB_MAX_QPS, 0);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_MAX_QPS_value_1) {
  testNumValue<int>("NCCL_CTRAN_IB_MAX_QPS", 9999);
  EXPECT_EQ(NCCL_CTRAN_IB_MAX_QPS, 9999);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_MAX_QPS_value_2) {
  testNumValue<int>("NCCL_CTRAN_IB_MAX_QPS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_CTRAN_IB_MAX_QPS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_CTRAN_IB_MAX_QPS_value_3) {
  testNumValue<int>("NCCL_CTRAN_IB_MAX_QPS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_CTRAN_IB_MAX_QPS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_CTRAN_IB_MAX_QPS_default_value) {
  testDefaultValue("NCCL_CTRAN_IB_MAX_QPS");
  EXPECT_EQ(NCCL_CTRAN_IB_MAX_QPS, 1);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_value_0) {
  testNumValue<uint64_t>("NCCL_CTRAN_IB_QP_SCALING_THRESHOLD", 0);
  EXPECT_EQ(NCCL_CTRAN_IB_QP_SCALING_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_value_1) {
  testNumValue<uint64_t>("NCCL_CTRAN_IB_QP_SCALING_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_CTRAN_IB_QP_SCALING_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_value_2) {
  testNumValue<uint64_t>("NCCL_CTRAN_IB_QP_SCALING_THRESHOLD", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_CTRAN_IB_QP_SCALING_THRESHOLD, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_value_3) {
  testNumValue<uint64_t>("NCCL_CTRAN_IB_QP_SCALING_THRESHOLD", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_CTRAN_IB_QP_SCALING_THRESHOLD, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_CTRAN_IB_QP_SCALING_THRESHOLD_default_value) {
  testDefaultValue("NCCL_CTRAN_IB_QP_SCALING_THRESHOLD");
  EXPECT_EQ(NCCL_CTRAN_IB_QP_SCALING_THRESHOLD, 1048576);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_y0) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_y1) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_y2) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_y3) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_n0) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_n1) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_n2) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_value_n3) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_CTRAN_IB_TRAFFIC_PROFILNG);
}

TEST_F(CvarTest, NCCL_CTRAN_IB_TRAFFIC_PROFILNG_warn_unknown_val) {
  setenv("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "dummy", 1);
  testWarn("NCCL_CTRAN_IB_TRAFFIC_PROFILNG", "Unknown value");
}

TEST_F(CvarTest, NCCL_CTRAN_KINETO_PROFILE_DIR_value_0) {
  setenv("NCCL_CTRAN_KINETO_PROFILE_DIR", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_KINETO_PROFILE_DIR, "val1");
}

TEST_F(CvarTest, NCCL_CTRAN_KINETO_PROFILE_DIR_value_1) {
  setenv("NCCL_CTRAN_KINETO_PROFILE_DIR", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_KINETO_PROFILE_DIR, "val2_with_space");
}

TEST_F(CvarTest, NCCL_CTRAN_KINETO_PROFILE_DIR_default_value) {
  testDefaultValue("NCCL_CTRAN_KINETO_PROFILE_DIR");
  EXPECT_EQ(NCCL_CTRAN_KINETO_PROFILE_DIR, "/tmp");
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_single_choice_0) {
  setenv("NCCL_CTRAN_PROFILING", "none", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_PROFILING, NCCL_CTRAN_PROFILING::none);
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_single_choice_1) {
  setenv("NCCL_CTRAN_PROFILING", "stdout", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_PROFILING, NCCL_CTRAN_PROFILING::stdout);
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_single_choice_2) {
  setenv("NCCL_CTRAN_PROFILING", "info", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_PROFILING, NCCL_CTRAN_PROFILING::info);
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_single_choice_3) {
  setenv("NCCL_CTRAN_PROFILING", "kineto", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_PROFILING, NCCL_CTRAN_PROFILING::kineto);
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_default_choice) {
  testDefaultValue("NCCL_CTRAN_PROFILING");
  EXPECT_EQ(NCCL_CTRAN_PROFILING, NCCL_CTRAN_PROFILING::none);
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_warn_unknown_val) {
  setenv("NCCL_CTRAN_PROFILING", "dummy", 1);
  testWarn("NCCL_CTRAN_PROFILING", "Unknown value");
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_REPORT_COUNT_value_0) {
  testNumValue<int>("NCCL_CTRAN_PROFILING_REPORT_COUNT", 0);
  EXPECT_EQ(NCCL_CTRAN_PROFILING_REPORT_COUNT, 0);
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_REPORT_COUNT_value_1) {
  testNumValue<int>("NCCL_CTRAN_PROFILING_REPORT_COUNT", 9999);
  EXPECT_EQ(NCCL_CTRAN_PROFILING_REPORT_COUNT, 9999);
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_REPORT_COUNT_value_2) {
  testNumValue<int>("NCCL_CTRAN_PROFILING_REPORT_COUNT", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_CTRAN_PROFILING_REPORT_COUNT, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_REPORT_COUNT_value_3) {
  testNumValue<int>("NCCL_CTRAN_PROFILING_REPORT_COUNT", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_CTRAN_PROFILING_REPORT_COUNT, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_CTRAN_PROFILING_REPORT_COUNT_default_value) {
  testDefaultValue("NCCL_CTRAN_PROFILING_REPORT_COUNT");
  EXPECT_EQ(NCCL_CTRAN_PROFILING_REPORT_COUNT, 100);
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_single_choice_0) {
  setenv("NCCL_CTRAN_REGISTER", "none", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_REGISTER, NCCL_CTRAN_REGISTER::none);
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_single_choice_1) {
  setenv("NCCL_CTRAN_REGISTER", "lazy", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_REGISTER, NCCL_CTRAN_REGISTER::lazy);
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_single_choice_2) {
  setenv("NCCL_CTRAN_REGISTER", "eager", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_REGISTER, NCCL_CTRAN_REGISTER::eager);
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_default_choice) {
  testDefaultValue("NCCL_CTRAN_REGISTER");
  EXPECT_EQ(NCCL_CTRAN_REGISTER, NCCL_CTRAN_REGISTER::lazy);
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_warn_unknown_val) {
  setenv("NCCL_CTRAN_REGISTER", "dummy", 1);
  testWarn("NCCL_CTRAN_REGISTER", "Unknown value");
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_value_0) {
  testNumValue<int>("NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT", 0);
  EXPECT_EQ(NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT, 0);
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_value_1) {
  testNumValue<int>("NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT", 9999);
  EXPECT_EQ(NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT, 9999);
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_value_2) {
  testNumValue<int>("NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_value_3) {
  testNumValue<int>("NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT_default_value) {
  testDefaultValue("NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT");
  EXPECT_EQ(NCCL_CTRAN_REGISTER_REPORT_SNAPSHOT_COUNT, -1);
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_value_0) {
  setenv("NCCL_CTRAN_TOPO_FILE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_TOPO_FILE, "val1");
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_value_1) {
  setenv("NCCL_CTRAN_TOPO_FILE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CTRAN_TOPO_FILE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_KEYS_valuelist_0) {
  setenv("NCCL_CTRAN_TOPO_FILE_KEYS", "val1,val2,val3", 1);
  std::vector<std::string> vals{"val1","val2","val3"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_CTRAN_TOPO_FILE_KEYS);
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_KEYS_valuelist_1) {
  setenv("NCCL_CTRAN_TOPO_FILE_KEYS", "val1:1,val2:2,val3:3", 1);
  std::vector<std::string> vals{"val1:1","val2:2","val3:3"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_CTRAN_TOPO_FILE_KEYS);
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_KEYS_valuelist_2) {
  setenv("NCCL_CTRAN_TOPO_FILE_KEYS", "val", 1);
  std::vector<std::string> vals{"val"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_CTRAN_TOPO_FILE_KEYS);
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_KEYS_valuelist_3) {
  setenv("NCCL_CTRAN_TOPO_FILE_KEYS", "val1, val_w_space  ", 1);
  std::vector<std::string> vals{"val1","val_w_space"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_CTRAN_TOPO_FILE_KEYS);
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_KEYS_default_value) {
  testDefaultValue("NCCL_CTRAN_TOPO_FILE_KEYS");
  EXPECT_EQ(NCCL_CTRAN_TOPO_FILE_KEYS.size(), 0);
}

TEST_F(CvarTest, NCCL_CTRAN_TOPO_FILE_KEYS_warn_dup_val) {
  setenv("NCCL_CTRAN_TOPO_FILE_KEYS", "dummy,dummy", 1);
  testWarn("NCCL_CTRAN_TOPO_FILE_KEYS", "Duplicate token");
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_MAX_BLOCKS_value_0) {
  testNumValue<int>("NCCL_DDA2_ALLREDUCE_MAX_BLOCKS", 0);
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_MAX_BLOCKS, 0);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_MAX_BLOCKS_value_1) {
  testNumValue<int>("NCCL_DDA2_ALLREDUCE_MAX_BLOCKS", 9999);
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_MAX_BLOCKS, 9999);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_MAX_BLOCKS_value_2) {
  testNumValue<int>("NCCL_DDA2_ALLREDUCE_MAX_BLOCKS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_MAX_BLOCKS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_MAX_BLOCKS_value_3) {
  testNumValue<int>("NCCL_DDA2_ALLREDUCE_MAX_BLOCKS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_MAX_BLOCKS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_MAX_BLOCKS_default_value) {
  testDefaultValue("NCCL_DDA2_ALLREDUCE_MAX_BLOCKS");
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_MAX_BLOCKS, 24);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD_value_0) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD", 0);
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD_value_1) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD_value_2) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD_value_3) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD_default_value) {
  testDefaultValue("NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD");
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_SCATGAT_THRESHOLD, 1048576);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD_value_0) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD", 0);
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD_value_1) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD_value_2) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD_value_3) {
  testNumValue<uint64_t>("NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD_default_value) {
  testDefaultValue("NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD");
  EXPECT_EQ(NCCL_DDA2_ALLREDUCE_TREE_THRESHOLD, 262144);
}

TEST_F(CvarTest, NCCL_DDA2_TMPBUFF_SIZE_value_0) {
  testNumValue<uint64_t>("NCCL_DDA2_TMPBUFF_SIZE", 0);
  EXPECT_EQ(NCCL_DDA2_TMPBUFF_SIZE, 0);
}

TEST_F(CvarTest, NCCL_DDA2_TMPBUFF_SIZE_value_1) {
  testNumValue<uint64_t>("NCCL_DDA2_TMPBUFF_SIZE", 9999);
  EXPECT_EQ(NCCL_DDA2_TMPBUFF_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_DDA2_TMPBUFF_SIZE_value_2) {
  testNumValue<uint64_t>("NCCL_DDA2_TMPBUFF_SIZE", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA2_TMPBUFF_SIZE, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA2_TMPBUFF_SIZE_value_3) {
  testNumValue<uint64_t>("NCCL_DDA2_TMPBUFF_SIZE", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA2_TMPBUFF_SIZE, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA2_TMPBUFF_SIZE_default_value) {
  testDefaultValue("NCCL_DDA2_TMPBUFF_SIZE");
  EXPECT_EQ(NCCL_DDA2_TMPBUFF_SIZE, 33554432);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_y0) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_y1) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_y2) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_y3) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_n0) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_n1) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_n2) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_value_n3) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM_warn_unknown_val) {
  setenv("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "dummy", 1);
  testWarn("NCCL_DDA_ALLREDUCE_LARGE_MESSAGE_HCM", "Unknown value");
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_0) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", 0);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, 0);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_1) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", 9999);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, 9999);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_2) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_3) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_default_value) {
  testDefaultValue("NCCL_DDA_ALLREDUCE_MAX_BLOCKS");
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, 1);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE_value_0) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE", 0);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE, 0);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE_value_1) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE", 9999);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE_value_2) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE_value_3) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE_default_value) {
  testDefaultValue("NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE");
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TMPBUFF_SIZE, 33554432);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM_value_0) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM", 0);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM, 0);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM_value_1) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM", 9999);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM, 9999);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM_value_2) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM_value_3) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM_default_value) {
  testDefaultValue("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM");
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_HCM, 65536);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS_value_0) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS", 0);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS, 0);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS_value_1) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS", 9999);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS, 9999);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS_value_2) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS_value_3) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS_default_value) {
  testDefaultValue("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS");
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_NVS, 262144);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_y0) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_y1) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_y2) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_y3) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_n0) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_n1) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_n2) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_value_n3) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_DDA_FORCE_P2P_ACCESS);
}

TEST_F(CvarTest, NCCL_DDA_FORCE_P2P_ACCESS_warn_unknown_val) {
  setenv("NCCL_DDA_FORCE_P2P_ACCESS", "dummy", 1);
  testWarn("NCCL_DDA_FORCE_P2P_ACCESS", "Unknown value");
}

TEST_F(CvarTest, NCCL_DDA_MAX_RANKS_value_0) {
  testNumValue<int>("NCCL_DDA_MAX_RANKS", 0);
  EXPECT_EQ(NCCL_DDA_MAX_RANKS, 0);
}

TEST_F(CvarTest, NCCL_DDA_MAX_RANKS_value_1) {
  testNumValue<int>("NCCL_DDA_MAX_RANKS", 9999);
  EXPECT_EQ(NCCL_DDA_MAX_RANKS, 9999);
}

TEST_F(CvarTest, NCCL_DDA_MAX_RANKS_value_2) {
  testNumValue<int>("NCCL_DDA_MAX_RANKS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_DDA_MAX_RANKS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_DDA_MAX_RANKS_value_3) {
  testNumValue<int>("NCCL_DDA_MAX_RANKS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_DDA_MAX_RANKS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_DDA_MAX_RANKS_default_value) {
  testDefaultValue("NCCL_DDA_MAX_RANKS");
  EXPECT_EQ(NCCL_DDA_MAX_RANKS, 16);
}

TEST_F(CvarTest, NCCL_IB_HCA_valuelist_0) {
  setenv("NCCL_IB_HCA", "val1,val2,val3", 1);
  std::vector<std::string> vals{"val1","val2","val3"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_IB_HCA);
}

TEST_F(CvarTest, NCCL_IB_HCA_valuelist_1) {
  setenv("NCCL_IB_HCA", "val1:1,val2:2,val3:3", 1);
  std::vector<std::string> vals{"val1:1","val2:2","val3:3"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_IB_HCA);
}

TEST_F(CvarTest, NCCL_IB_HCA_valuelist_2) {
  setenv("NCCL_IB_HCA", "val", 1);
  std::vector<std::string> vals{"val"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_IB_HCA);
}

TEST_F(CvarTest, NCCL_IB_HCA_valuelist_3) {
  setenv("NCCL_IB_HCA", "val1, val_w_space  ", 1);
  std::vector<std::string> vals{"val1","val_w_space"};
  ncclCvarInit();
  checkListValues<std::string>(vals, NCCL_IB_HCA);
}

TEST_F(CvarTest, NCCL_IB_HCA_default_value) {
  testDefaultValue("NCCL_IB_HCA");
  EXPECT_EQ(NCCL_IB_HCA.size(), 0);
}

TEST_F(CvarTest, NCCL_IB_HCA_warn_dup_val) {
  setenv("NCCL_IB_HCA", "dummy,dummy", 1);
  testWarn("NCCL_IB_HCA", "Duplicate token");
}

TEST_F(CvarTest, NCCL_IB_HCA_prefix_0) {
  setenv("NCCL_IB_HCA", "^val1,val2,val3", 1);
  std::vector<std::string> vals{"val1","val2","val3"};
  ncclCvarInit();
  EXPECT_EQ(NCCL_IB_HCA_PREFIX, "^");
  checkListValues<std::string>(vals, NCCL_IB_HCA);
}

TEST_F(CvarTest, NCCL_IB_HCA_prefix_1) {
  setenv("NCCL_IB_HCA", "=val1,val2,val3", 1);
  std::vector<std::string> vals{"val1","val2","val3"};
  ncclCvarInit();
  EXPECT_EQ(NCCL_IB_HCA_PREFIX, "=");
  checkListValues<std::string>(vals, NCCL_IB_HCA);
}

TEST_F(CvarTest, NCCL_IB_HCA_prefix_2) {
  setenv("NCCL_IB_HCA", "val1,val2,val3", 1);
  std::vector<std::string> vals{"val1","val2","val3"};
  ncclCvarInit();
  EXPECT_EQ(NCCL_IB_HCA_PREFIX, "");
  checkListValues<std::string>(vals, NCCL_IB_HCA);
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_0) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", 0);
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, 0);
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_1) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", 9999);
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, 9999);
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_2) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_3) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MAX_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MAX_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MAX_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MAX_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MAX_NCHANNELS");
  EXPECT_EQ(NCCL_MAX_NCHANNELS, -2);
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_0) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", 0);
  EXPECT_EQ(NCCL_MAX_NRINGS, 0);
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_1) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", 9999);
  EXPECT_EQ(NCCL_MAX_NRINGS, 9999);
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_2) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MAX_NRINGS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_3) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MAX_NRINGS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_default_value) {
  testDefaultValue("NCCL_MAX_NRINGS");
  EXPECT_EQ(NCCL_MAX_NRINGS, -2);
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MAX_P2P_NCHANNELS");
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, 32);
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MIN_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MIN_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MIN_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MIN_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MIN_NCHANNELS");
  EXPECT_EQ(NCCL_MIN_NCHANNELS, -2);
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_0) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", 0);
  EXPECT_EQ(NCCL_MIN_NRINGS, 0);
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_1) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", 9999);
  EXPECT_EQ(NCCL_MIN_NRINGS, 9999);
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_2) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MIN_NRINGS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_3) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MIN_NRINGS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_default_value) {
  testDefaultValue("NCCL_MIN_NRINGS");
  EXPECT_EQ(NCCL_MIN_NRINGS, -2);
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MIN_P2P_NCHANNELS");
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, 1);
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_0) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", 0);
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, 0);
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_1) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", 9999);
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, 9999);
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_2) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_3) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_default_value) {
  testDefaultValue("NCCL_NCHANNELS_PER_NET_PEER");
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, 2);
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_0) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", 0);
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, 0);
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_1) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", 9999);
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, 9999);
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_2) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_3) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_0) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", 0);
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, 0);
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_1) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", 9999);
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, 9999);
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_2) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_3) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_default_value) {
  testDefaultValue("NCCL_NET_FORCE_FLUSH");
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, 1);
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_0) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", 0);
  EXPECT_EQ(NCCL_NET_GDR_READ, 0);
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_1) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", 9999);
  EXPECT_EQ(NCCL_NET_GDR_READ, 9999);
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_2) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_GDR_READ, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_3) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_GDR_READ, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_default_value) {
  testDefaultValue("NCCL_NET_GDR_READ");
  EXPECT_EQ(NCCL_NET_GDR_READ, -2);
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_0) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", 0);
  EXPECT_EQ(NCCL_NVB_DISABLE, 0);
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_1) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", 9999);
  EXPECT_EQ(NCCL_NVB_DISABLE, 9999);
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_2) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NVB_DISABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_3) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NVB_DISABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_0) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", 0);
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, 0);
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_1) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", 9999);
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, 9999);
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_2) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_3) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_default_value) {
  testDefaultValue("NCCL_P2P_PXN_LEVEL");
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, 2);
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_0) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", 0);
  EXPECT_EQ(NCCL_PXN_DISABLE, 0);
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_1) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", 9999);
  EXPECT_EQ(NCCL_PXN_DISABLE, 9999);
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_2) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_PXN_DISABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_3) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_PXN_DISABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_SENDRECV_ALGO_single_choice_0) {
  setenv("NCCL_SENDRECV_ALGO", "orig", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_SENDRECV_ALGO, NCCL_SENDRECV_ALGO::orig);
}

TEST_F(CvarTest, NCCL_SENDRECV_ALGO_single_choice_1) {
  setenv("NCCL_SENDRECV_ALGO", "ctran", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_SENDRECV_ALGO, NCCL_SENDRECV_ALGO::ctran);
}

TEST_F(CvarTest, NCCL_SENDRECV_ALGO_default_choice) {
  testDefaultValue("NCCL_SENDRECV_ALGO");
  EXPECT_EQ(NCCL_SENDRECV_ALGO, NCCL_SENDRECV_ALGO::orig);
}

TEST_F(CvarTest, NCCL_SENDRECV_ALGO_warn_unknown_val) {
  setenv("NCCL_SENDRECV_ALGO", "dummy", 1);
  testWarn("NCCL_SENDRECV_ALGO", "Unknown value");
}



/**
* END of generated tests
*/

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  ::testing::AddGlobalTestEnvironment(new NCCLEnvironment);
  return RUN_ALL_TESTS();
}
